{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pagina principal Cabecera","title":"Home"},{"location":"#pagina-principal","text":"","title":"Pagina principal"},{"location":"#cabecera","text":"","title":"Cabecera"},{"location":"bash/","text":"Optmice Deep learning turbojpeg Preparsear los ficheros se cargan a bajo nivel - Numpy Memmap - Torch storage https://pytorch.org/blog/efficient-pytorch-io-library-for-large-datasets-many-files-many-gpus/ https://www.deepspeed.ai/ https://ffcv.io/ kornia: agmentations on GPU Optimize OS linux kernel: Xanmod File systems BTRFS - Recomendado por andres torrubia... - ...No por prestaciones, lo ha elegido por funcionalidad - Copias autoam\u00e1ticas (equvalente a la Time Machine de apple) - Con snapper que es un sofware que va por encima, tienes facilmente recuperable como estaba tu ordenador hace 1 hora, hace 1 dia, ... te salva la vida cuando borras datos por accidente - sucesor natural del sistema de archivos EXT4 - menos velocidad de lectura y escritura que EXT4 ZFS - Recomendado por profe ASORC carrera informatica - Sistema por defecto de freeBSD - Puedes meter y quitar Discos ampliando o reduciendo el espacio (y el logical volume y ZFS se adapta) - ASi que va bien para tener hot-swapable disks - Es sin\u00f3nimo de escalabilidad - Desventaja: consumo alto de memoria RAM EXT4 - Mas comun en linux. - Tambien es rapido (mas que btrfs) XFS - Tambien es rapido copy-on-write (COW) mechanism: when you modify a file, the file system won\u2019t overwrite the existing data on the drive. Instead, the newer data is written elsewhere. Once the write operation is over, the file system simply points to the newer data blocks. - Ventaja: asegurar la integridad de los archivos en caso de corte el\u00e9ctrico. - Desventaja: una alta fragmentaci\u00f3n, journaling (mejora la integridad del sistema de archivos), por lo que no deber\u00edas tener p\u00e9rdida de datos en caso de corte de alimentaci\u00f3n Asegurar integridad How to Scalable for en caso de corte corr RAID? hot-swap disks EXT4 journaling need to format no BTRFS copy-on-write ZFS copy-on-write pool of vdevs vdevs == Virtual DEVice. A pool is made up of vdevs. A vdev is made up of physical devices. Let's say you have 12 physical disks. You might have a pool consisting of 6 mirrors. Each two disk mirror is a vdev. So your pool has 6 vdevs. Optimizacion trick 1: Desactivar el atributo atime El atributo atime (access time) es recopilado y actualizado cada vez que el usuario lee o modifica un determinado archivo. En total, se recogen 3 atributos: Access: la \u00faltima vez que el archivo fue le\u00eddo Modify: la \u00faltima vez que el archivo fue modificado (su contenido) Change: la \u00faltima vez que los meta-datos del archivo fueron modificados (permisos, nombre, propietario, etc) Mediante noatime desactivamos esta funcionalidad y ganamos algo de velocidad al leer y escribira archivos. https://markmcb.com/2020/01/07/five-years-of-btrfs/ https://carfax.org.uk/btrfs-usage/ https://www.linuxjournal.com/content/hot-swappable-filesystems-smooth-btrfs https://www.salvagedata.com/btrfs-zfs-xfs-ext4-how-are-they-different/ I/O schedulers https://wiki.archlinux.org/title/improving_performance https://wiki.ubuntu.com/Kernel/Reference/IOSchedulers https://community.clearlinux.org/t/arch-linux-outperforms-clear-linux/5462 https://clearlinux.org/ Find duplicates OPTION A) Comparing filenames ls | sort | uniq -d OPTION B) Comparing line by line (text files) diff OPTION C) Comparing Byte by byte (binary files) OPTION D) Comparing Checksums, hashes, fingerprints md5sum sha1sum, Some filesytems already computes th checksums ZFS: Performs automatic file integrity checking using checksums https://unix.stackexchange.com/questions/28895/open-source-duplicate-image-finder-for-linux Parallel https://www.baeldung.com/linux/processing-commands-in-parallel cat photos.txt | sed 's/,/ /' > photosTAB.txt # Option 1 (sequential with for loop) cat ../photosTAB.txt | while read id url; do wget -O \"$id\" \"$url\"; done # Option 2 (sequential with for loop) wget --input-file=<(tail ../photosTAB.txt | cut -d \",\" -f 2) # Option 3 (parallel with xargs) echo $URL_LIST | xargs -n 1 -P 8 wget -q # Option 4 (parallel with gnu parallel) cat ../photosTAB.txt | parallel --jobs 100 --colsep '\\t' wget -O {1} {2} Special variables $0 : Name of the script $1 to $9 : Arguments to the script. \"$10\" and so on for the rest. $@ : All the arguments $# : Number of arguments $$ : Process identification number (PID) for the current script $? : Return code of the previous command !! : Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing sudo !! $_ : Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing Esc followed by . or Alt+. Arrays An array is a numbered list of strings: It maps integers to strings. Creating Arrays names=(\"Bob\" \"Peter\" \"$USER\" \"Big Bad John\") Simple way names=([0]=\"Bob\" [1]=\"Peter\" [20]=\"$USER\" [21]=\"Big Bad John\") Explicit indexes (sparse array) names[0]=\"Bob\" files=(~/*.jpg) Result of a glob photos=(~/\"My Photos\"/*.jpg) Result of a glob files=$(ls) BAD, BAD, BAD! files=($(ls)) STILL BAD! files=(*) GOOD: filenames in the current directory Associative Arrays (Dictionaries) fullNames=( [\"lhunath\"]=\"Maarten Billemont\" [\"greycat\"]=\"Greg Wooledge\" ) Control Operators ( && and || ) someCommand && echo \"Previos comand worked (exit estatus==0)\" someCommand || echo \"Previos comand failed (exit estatus!=0)\" [ a = a ]; echo $? # 0 (True) [ a = b ]; echo $? # 1 (False) true; echo $? # 0 (True) false; echo $? # 1 (False) If if [[ $filename = *.jpg ]]; then echo \"$filename is a jpeg\" fi 6. Choices (case and select) Each choice in a case statement consists of a pattern (or a list of patterns) case $LANG in en*) echo 'Hello!' ;; fr*) echo 'Salut!' ;; de*) echo 'Guten Tag!' ;; nl*) echo 'Hallo!' ;; it*) echo 'Ciao!' ;; es*) echo 'Hola!' ;; C|POSIX) echo 'hello world' ;; *) echo 'I do not speak your language.' ;; esac Loops There are 4 different loops expressions: for variable in words : Repeat the loop for each word, setting variable to each word in turn. for i in 1 2 3 4 for i in {1..4} for file in *.mp3 for file in *.jpg *.jpeg for (( expr ; expr ; expr )) : C style for loop for (( i=1; i < 5; i++ )) while command : Repeat so long as command is executed successfully (exit code is 0). while (( i < 5 )) while true : Infinite loop while sleep 300 Infinite loop every 5 minutes while read -p \"Input something:\" input_variable Wait for user input until command : Repeat so long as command is executed unsuccessfully (exit code is not 0). Not very used because is the same as while ! command loop_expresion do commads done While loop Arrays http://mywiki.wooledge.org/BashGuide/Arrays http://mywiki.wooledge.org/BashFAQ/005 Associative arrays (dictionaries) http://mywiki.wooledge.org/BashGuide/Arrays#Associative_Arrays http://mywiki.wooledge.org/BashFAQ/006 Parameter expansion http://mywiki.wooledge.org/BashGuide/Parameters#Parameter_Expansion Simple usage $PARAMETER ${PARAMETER} Indirection ${!PARAMETER} Case modification ${PARAMETER^} ${PARAMETER^^} ${PARAMETER,} ${PARAMETER,,} ${PARAMETER~} ${PARAMETER~~} Variable name expansion ${!PREFIX*} ${!PREFIX@} Substring removal ${PARAMETER#PATTERN} ${PARAMETER##PATTERN} ${PARAMETER%PATTERN} ${PARAMETER%%PATTERN} Search and replace ${PARAMETER/PATTERN/STRING} ${PARAMETER//PATTERN/STRING} ${PARAMETER/PATTERN} ${PARAMETER//PATTERN} String or array length ${#PARAMETER} Substring expansion ${PARAMETER:OFFSET} ${PARAMETER:OFFSET:LENGTH} Use a default value ${PARAMETER:-WORD} ${PARAMETER-WORD} Assign a default value ${PARAMETER:=WORD} ${PARAMETER=WORD} Use an alternate value ${PARAMETER:+WORD} ${PARAMETER+WORD} Display error if null or unset ${PARAMETER:?WORD} ${PARAMETER?WORD} file=\"$HOME/.secrets/007\" echo \"File location: $file\" # /home/lhunath/.secrets/007 echo \"Filename: ${file##*/}\" # 007 echo \"Directory: ${file%/*}\" # /home/lhunath/.secrets echo echo \"Non-secret file: ${file/secrets/not_secret}\" # /home/lhunath/.not_secret/007 echo echo \"Other file location: ${other:-There is no other file}\" # There is no other file echo \"Using file if there is no other file: ${other:=$file}\" # /home/lhunath/.secrets/007 echo \"Other filename: ${other##*/}\" # 007 echo \"Other file location length: ${#other}\" # 26 # Note: You cannot use multiple Param Exps together file=$HOME/image.jpg file=${file##*/} echo \"${file%.*}\" # image version=1.5.9 echo \"MAJOR: ${version%%.*}\" # MAJOR: 1 echo \"MINOR: ${version#*.}.\" # MINOR: 5.9. echo \"Dash: ${version/./-}\" # Dash: 1-5.9 echo \"Dashes: ${version//./-}.\" # Dashes: 1-5-9. parameter result ----------- ------------------------------ $name polish.ostrich.racing.champion ${name#*.} ostrich.racing.champion ${name##*.} champion ${name%%.*} polish ${name%.*} polish.ostrich.racing Brace expansions Brace expansions can only be used to generate lists of words. You can not use with variables because brace expansion happens before parameter expansion. for i in {1..$n} Won't work! {a,b,c} : a b c {foo,bar} : foo bar {1..15} : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 {9..1} : 9 8 7 6 5 4 3 2 1 {A..g} : A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _ \u00b4 a b c d e f g {e..a} : e d c b a {a..c} {x..z} : a b c x y z {1..3} {a..c} 1 2 3 a b c {1..3}{a..c} : 1a 1b 1c 2a 2b 2c 3a 3b 3c {0,1}{0..9} : 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html Pattern Matching Globs (filename expansion) You can use it with ls , mkdir , echo , for i in {} Globs * : Matches any string, including the null string. But no the / chararcater */bin might match foo/bin but it cannot match /usr/local/bin . ? : Matches any single character. But no the / chararcater [...] : Matches any one of the enclosed characters. Extended Globs (off by default, activate with shopt -s extglob ) ?(pattern-list) : Matches zero or one occurrence of the given patterns. *(pattern-list) : Matches zero or more occurrences of the given patterns. +(pattern-list) : Matches one or more occurrences of the given patterns. @(pattern-list) : Matches one of the given patterns. !(pattern-list) : Matches anything except one of the given patterns. !(*jpg|*bmp) : anything that does not match the *jpg or the *bmp pattern Globs with brace expansion Because Brace expansion happens before Filename expansion, ls *{.jpg,.png} will become ls *.jpg *.png and then execute the comand. Regular expressions $ rm /etc/some_file.conf || echo \"I couldn't remove the file\"","title":"Bash scripting"},{"location":"bash/#optmice-deep-learning","text":"turbojpeg Preparsear los ficheros se cargan a bajo nivel - Numpy Memmap - Torch storage https://pytorch.org/blog/efficient-pytorch-io-library-for-large-datasets-many-files-many-gpus/ https://www.deepspeed.ai/ https://ffcv.io/ kornia: agmentations on GPU","title":"Optmice Deep learning"},{"location":"bash/#optimize-os","text":"","title":"Optimize OS"},{"location":"bash/#linux-kernel","text":"Xanmod","title":"linux kernel:"},{"location":"bash/#file-systems","text":"BTRFS - Recomendado por andres torrubia... - ...No por prestaciones, lo ha elegido por funcionalidad - Copias autoam\u00e1ticas (equvalente a la Time Machine de apple) - Con snapper que es un sofware que va por encima, tienes facilmente recuperable como estaba tu ordenador hace 1 hora, hace 1 dia, ... te salva la vida cuando borras datos por accidente - sucesor natural del sistema de archivos EXT4 - menos velocidad de lectura y escritura que EXT4 ZFS - Recomendado por profe ASORC carrera informatica - Sistema por defecto de freeBSD - Puedes meter y quitar Discos ampliando o reduciendo el espacio (y el logical volume y ZFS se adapta) - ASi que va bien para tener hot-swapable disks - Es sin\u00f3nimo de escalabilidad - Desventaja: consumo alto de memoria RAM EXT4 - Mas comun en linux. - Tambien es rapido (mas que btrfs) XFS - Tambien es rapido copy-on-write (COW) mechanism: when you modify a file, the file system won\u2019t overwrite the existing data on the drive. Instead, the newer data is written elsewhere. Once the write operation is over, the file system simply points to the newer data blocks. - Ventaja: asegurar la integridad de los archivos en caso de corte el\u00e9ctrico. - Desventaja: una alta fragmentaci\u00f3n, journaling (mejora la integridad del sistema de archivos), por lo que no deber\u00edas tener p\u00e9rdida de datos en caso de corte de alimentaci\u00f3n Asegurar integridad How to Scalable for en caso de corte corr RAID? hot-swap disks EXT4 journaling need to format no BTRFS copy-on-write ZFS copy-on-write pool of vdevs vdevs == Virtual DEVice. A pool is made up of vdevs. A vdev is made up of physical devices. Let's say you have 12 physical disks. You might have a pool consisting of 6 mirrors. Each two disk mirror is a vdev. So your pool has 6 vdevs.","title":"File systems"},{"location":"bash/#optimizacion-trick-1-desactivar-el-atributo-atime","text":"El atributo atime (access time) es recopilado y actualizado cada vez que el usuario lee o modifica un determinado archivo. En total, se recogen 3 atributos: Access: la \u00faltima vez que el archivo fue le\u00eddo Modify: la \u00faltima vez que el archivo fue modificado (su contenido) Change: la \u00faltima vez que los meta-datos del archivo fueron modificados (permisos, nombre, propietario, etc) Mediante noatime desactivamos esta funcionalidad y ganamos algo de velocidad al leer y escribira archivos. https://markmcb.com/2020/01/07/five-years-of-btrfs/ https://carfax.org.uk/btrfs-usage/ https://www.linuxjournal.com/content/hot-swappable-filesystems-smooth-btrfs https://www.salvagedata.com/btrfs-zfs-xfs-ext4-how-are-they-different/","title":"Optimizacion trick 1: Desactivar el atributo atime"},{"location":"bash/#io-schedulers","text":"https://wiki.archlinux.org/title/improving_performance https://wiki.ubuntu.com/Kernel/Reference/IOSchedulers https://community.clearlinux.org/t/arch-linux-outperforms-clear-linux/5462 https://clearlinux.org/","title":"I/O schedulers"},{"location":"bash/#find-duplicates","text":"OPTION A) Comparing filenames ls | sort | uniq -d OPTION B) Comparing line by line (text files) diff OPTION C) Comparing Byte by byte (binary files) OPTION D) Comparing Checksums, hashes, fingerprints md5sum sha1sum, Some filesytems already computes th checksums ZFS: Performs automatic file integrity checking using checksums https://unix.stackexchange.com/questions/28895/open-source-duplicate-image-finder-for-linux","title":"Find duplicates"},{"location":"bash/#parallel","text":"https://www.baeldung.com/linux/processing-commands-in-parallel cat photos.txt | sed 's/,/ /' > photosTAB.txt","title":"Parallel"},{"location":"bash/#option-1-sequential-with-for-loop","text":"cat ../photosTAB.txt | while read id url; do wget -O \"$id\" \"$url\"; done","title":"# Option 1 (sequential with for loop)"},{"location":"bash/#option-2-sequential-with-for-loop","text":"wget --input-file=<(tail ../photosTAB.txt | cut -d \",\" -f 2)","title":"# Option 2 (sequential with for loop)"},{"location":"bash/#option-3-parallel-with-xargs","text":"echo $URL_LIST | xargs -n 1 -P 8 wget -q","title":"# Option 3 (parallel with xargs)"},{"location":"bash/#option-4-parallel-with-gnu-parallel","text":"cat ../photosTAB.txt | parallel --jobs 100 --colsep '\\t' wget -O {1} {2}","title":"# Option 4 (parallel with gnu parallel)"},{"location":"bash/#special-variables","text":"$0 : Name of the script $1 to $9 : Arguments to the script. \"$10\" and so on for the rest. $@ : All the arguments $# : Number of arguments $$ : Process identification number (PID) for the current script $? : Return code of the previous command !! : Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing sudo !! $_ : Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing Esc followed by . or Alt+.","title":"Special variables"},{"location":"bash/#arrays","text":"An array is a numbered list of strings: It maps integers to strings. Creating Arrays names=(\"Bob\" \"Peter\" \"$USER\" \"Big Bad John\") Simple way names=([0]=\"Bob\" [1]=\"Peter\" [20]=\"$USER\" [21]=\"Big Bad John\") Explicit indexes (sparse array) names[0]=\"Bob\" files=(~/*.jpg) Result of a glob photos=(~/\"My Photos\"/*.jpg) Result of a glob files=$(ls) BAD, BAD, BAD! files=($(ls)) STILL BAD! files=(*) GOOD: filenames in the current directory","title":"Arrays"},{"location":"bash/#associative-arrays-dictionaries","text":"fullNames=( [\"lhunath\"]=\"Maarten Billemont\" [\"greycat\"]=\"Greg Wooledge\" )","title":"Associative Arrays (Dictionaries)"},{"location":"bash/#control-operators-and","text":"someCommand && echo \"Previos comand worked (exit estatus==0)\" someCommand || echo \"Previos comand failed (exit estatus!=0)\" [ a = a ]; echo $? # 0 (True) [ a = b ]; echo $? # 1 (False) true; echo $? # 0 (True) false; echo $? # 1 (False)","title":"Control Operators (&amp;&amp; and ||)"},{"location":"bash/#if","text":"if [[ $filename = *.jpg ]]; then echo \"$filename is a jpeg\" fi","title":"If"},{"location":"bash/#6-choices-case-and-select","text":"Each choice in a case statement consists of a pattern (or a list of patterns) case $LANG in en*) echo 'Hello!' ;; fr*) echo 'Salut!' ;; de*) echo 'Guten Tag!' ;; nl*) echo 'Hallo!' ;; it*) echo 'Ciao!' ;; es*) echo 'Hola!' ;; C|POSIX) echo 'hello world' ;; *) echo 'I do not speak your language.' ;; esac","title":"6. Choices (case and select)"},{"location":"bash/#loops","text":"There are 4 different loops expressions: for variable in words : Repeat the loop for each word, setting variable to each word in turn. for i in 1 2 3 4 for i in {1..4} for file in *.mp3 for file in *.jpg *.jpeg for (( expr ; expr ; expr )) : C style for loop for (( i=1; i < 5; i++ )) while command : Repeat so long as command is executed successfully (exit code is 0). while (( i < 5 )) while true : Infinite loop while sleep 300 Infinite loop every 5 minutes while read -p \"Input something:\" input_variable Wait for user input until command : Repeat so long as command is executed unsuccessfully (exit code is not 0). Not very used because is the same as while ! command loop_expresion do commads done","title":"Loops"},{"location":"bash/#while-loop","text":"","title":"While loop"},{"location":"bash/#arrays_1","text":"http://mywiki.wooledge.org/BashGuide/Arrays http://mywiki.wooledge.org/BashFAQ/005","title":"Arrays"},{"location":"bash/#associative-arrays-dictionaries_1","text":"http://mywiki.wooledge.org/BashGuide/Arrays#Associative_Arrays http://mywiki.wooledge.org/BashFAQ/006","title":"Associative arrays (dictionaries)"},{"location":"bash/#parameter-expansion","text":"http://mywiki.wooledge.org/BashGuide/Parameters#Parameter_Expansion Simple usage $PARAMETER ${PARAMETER} Indirection ${!PARAMETER} Case modification ${PARAMETER^} ${PARAMETER^^} ${PARAMETER,} ${PARAMETER,,} ${PARAMETER~} ${PARAMETER~~} Variable name expansion ${!PREFIX*} ${!PREFIX@} Substring removal ${PARAMETER#PATTERN} ${PARAMETER##PATTERN} ${PARAMETER%PATTERN} ${PARAMETER%%PATTERN} Search and replace ${PARAMETER/PATTERN/STRING} ${PARAMETER//PATTERN/STRING} ${PARAMETER/PATTERN} ${PARAMETER//PATTERN} String or array length ${#PARAMETER} Substring expansion ${PARAMETER:OFFSET} ${PARAMETER:OFFSET:LENGTH} Use a default value ${PARAMETER:-WORD} ${PARAMETER-WORD} Assign a default value ${PARAMETER:=WORD} ${PARAMETER=WORD} Use an alternate value ${PARAMETER:+WORD} ${PARAMETER+WORD} Display error if null or unset ${PARAMETER:?WORD} ${PARAMETER?WORD} file=\"$HOME/.secrets/007\" echo \"File location: $file\" # /home/lhunath/.secrets/007 echo \"Filename: ${file##*/}\" # 007 echo \"Directory: ${file%/*}\" # /home/lhunath/.secrets echo echo \"Non-secret file: ${file/secrets/not_secret}\" # /home/lhunath/.not_secret/007 echo echo \"Other file location: ${other:-There is no other file}\" # There is no other file echo \"Using file if there is no other file: ${other:=$file}\" # /home/lhunath/.secrets/007 echo \"Other filename: ${other##*/}\" # 007 echo \"Other file location length: ${#other}\" # 26 # Note: You cannot use multiple Param Exps together file=$HOME/image.jpg file=${file##*/} echo \"${file%.*}\" # image version=1.5.9 echo \"MAJOR: ${version%%.*}\" # MAJOR: 1 echo \"MINOR: ${version#*.}.\" # MINOR: 5.9. echo \"Dash: ${version/./-}\" # Dash: 1-5.9 echo \"Dashes: ${version//./-}.\" # Dashes: 1-5-9. parameter result ----------- ------------------------------ $name polish.ostrich.racing.champion ${name#*.} ostrich.racing.champion ${name##*.} champion ${name%%.*} polish ${name%.*} polish.ostrich.racing","title":"Parameter expansion"},{"location":"bash/#brace-expansions","text":"Brace expansions can only be used to generate lists of words. You can not use with variables because brace expansion happens before parameter expansion. for i in {1..$n} Won't work! {a,b,c} : a b c {foo,bar} : foo bar {1..15} : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 {9..1} : 9 8 7 6 5 4 3 2 1 {A..g} : A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _ \u00b4 a b c d e f g {e..a} : e d c b a {a..c} {x..z} : a b c x y z {1..3} {a..c} 1 2 3 a b c {1..3}{a..c} : 1a 1b 1c 2a 2b 2c 3a 3b 3c {0,1}{0..9} : 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html Pattern Matching","title":"Brace expansions"},{"location":"bash/#globs-filename-expansion","text":"You can use it with ls , mkdir , echo , for i in {} Globs * : Matches any string, including the null string. But no the / chararcater */bin might match foo/bin but it cannot match /usr/local/bin . ? : Matches any single character. But no the / chararcater [...] : Matches any one of the enclosed characters. Extended Globs (off by default, activate with shopt -s extglob ) ?(pattern-list) : Matches zero or one occurrence of the given patterns. *(pattern-list) : Matches zero or more occurrences of the given patterns. +(pattern-list) : Matches one or more occurrences of the given patterns. @(pattern-list) : Matches one of the given patterns. !(pattern-list) : Matches anything except one of the given patterns. !(*jpg|*bmp) : anything that does not match the *jpg or the *bmp pattern","title":"Globs (filename expansion)"},{"location":"bash/#globs-with-brace-expansion","text":"Because Brace expansion happens before Filename expansion, ls *{.jpg,.png} will become ls *.jpg *.png and then execute the comand.","title":"Globs with brace expansion"},{"location":"bash/#regular-expressions","text":"$ rm /etc/some_file.conf || echo \"I couldn't remove the file\"","title":"Regular expressions"},{"location":"hardware/","text":"Hardware Mother board 1*1030\u20ac = 1030\u20ac https://www.pccomponentes.com/asus-pro-ws-wrx80e-sage-se-wifi CPU 32 cores 1*3500\u20ac = 3500\u20ac 6 x GPU 3090 6*2200\u20ac = 13000\u20ac 256GB RAM (8 x 32GB) 8*225\u20ac = 1800\u20ac 16TB NVMe (8 x 2TB) 8*320\u20ac = 2650\u20ac 128TB HHD (8 x 8TB) 8*320\u20ac = 2650\u20ac ======================================= 25000\u20ac Componente Precio Inic. Mej 1 Mej 2 Mej 3 Mej 4 Mej 5 Mej 6 Mother board (ASUS PRO WS WRX80E) 1030\u20ac x1 CPU (AMD thradripper 5975WX) 3500\u20ac x1 GPU (Nvidia RTX 3090) 2200\u20ac x1 x1 x1 x1 x1 x1 x1 256GB RAM (8 x 32GB) 1800\u20ac Almacenamineto SSD M2 Almacenamineto SSD SATA Almacenamineto HDD Fuente Total 8530\u20ac Motherboard 128 PCIe 4.0 lines Opcion 1 7 GPUS 4 nvmes M.2 (con capacidad raid 0) Opcion 8 6 GPUS 8 nvmes M.2 (con capacidad raid 0) 8 ranuras de ram (con ECC) CPU: Threadripper Pro (gama 3000 o 5000) 8 sata ports https://www.youtube.com/watch?v=m5xd2ZizMOA MSI WS WRX80 CPU AMD | | | | PISTAS | | | | CORES | RAM MEMORY | PCIe4.0 | PRICE | SOCKET |-------------------------|-------|---------------------|---------|-------|------- | Ryzen 9 5900X | 12 | 128GB (2ch) | 20 | 500\u20ac | | Ryzen 9 5950X | 16 | 128GB (2ch) | 20 | 670\u20ac | | | | | | | | Threadripper 3960X | 24 | 512GB (4ch) 95 GB/s | 64 | 1700\u20ac | sTRX4 | Threadripper 3970X | 32 | 512GB (4ch) 95 GB/s | 64 | | sTRX4 | Threadripper 3990X | 64 | 512GB (4ch) 95 GB/s | 64 | | sTRX4 | | | | | | | Marzo 2021 | | | | | | Threadripper Pro 3945WX | 12 | 2TB (8ch) 205 GB/s | 128 | | WRX80 | Threadripper Pro 3955WX | 16 | 2TB (8ch) 205 GB/s | 128 | | | Threadripper Pro 3965WX | 24 | 2TB (8ch) 205 GB/s | 128 | | | Threadripper Pro 3975WX | 32 | 2TB (8ch) 205 GB/s | 128 | 3500\u20ac | ESTE ES EL DE ANDRES | Threadripper Pro 3995WX | 64 | 2TB (8ch) 205 GB/s | 128 | 6000..8000\u20ac | | | | | | | | Marzo 2022 | | | | | | Threadripper Pro 5945WX | 12 | 8 sWRX8 | Threadripper Pro 5955WX | 16 | 8 | Threadripper Pro 5965WX | 24 | 8 | Threadripper Pro 5975WX | 32 | 8 | Threadripper Pro 5995WX | 64 | 8 | | | Gama de servidores | | | EPYC 7001 | EPYC 7002 | EPYC 7003 https://gadgetversus.com/processor/amd-ryzen-threadripper-pro-3955wx-specs/ MAL: pero no lo recomineda pq tine contencion de memoria pq tiene 4 canales Andres recomienda la gama Threadripper antes que la Epyc pq caundo usas porcesoso de 1 solo hilo con 1 solo nueclo va mas r\u00e1pido. la serie pro de los thradriper (acaba en 5) tiene soporte para 8 canales en memoria PCIe PCIe Bits x1 x4 (Nvme) x8 x16 (GPU) 1.0 8b/10b 250 MB/s 1 GB/s 2 GB/s 4 GB/s 2.0 8b/10b 500 MB/s 2 GB/s 4 GB/s 8 GB/s 3.0 128b/130b 984.6 MB/s 3.938 GB/s 7.877 GB/s 15.754 GB/s 4.0 128b/130b 1.969 GB/s 7.877 GB/s 15.754 GB/s 31.508 GB/s GPU CUDA Tensor FP64 GPU Realese cores cores Memory Watts Price tFPLOS A2 Nov 2021 1280 24GB GDDR6 50 A10 Apr 2021 9216 24GB GDDR6 150 3090 (24GB) A6000 A16 Apr 2021 10240 4x16GB GDDR6 250 A30 Apr 2021 3584 24GB HBM2 165 5.000\u20ac (5,2) 10,3 A40 Oct 2020 10752 336 48GB GDDR6 300 5.000\u20ac A100 May 2020 6912 40GB HBM2 250 10.000\u20ac A100 May 2020 6912 40GB HBM2BULK250 10.000\u20ac A100 May 2020 6912 80GB HBM2 250 20.000\u20ac Discos duros lectura seq escritura seq HDD 80..150 MB/s 80..150 MB/s SSD SATA 500..550 MB/s 450..500 MB/s SSD M.2 NVMe PCIe 3.0 3000.3500 MB/s 3000.3500 MB/s SSD M.2 NVMe PCIe 4.0 5000.7000 MB/s 5000.7000 MB/s ojo! no todos los SSD M.2 del mercado son NVMe, tambi\u00e9n hay unidades M.2 SATA . Loss M.2 NVMe PCIe tienen un problema denominado Thermal Throttling: el rendimiento cae dr\u00e1sticamente cuando se da una temperatura muy elevada. Por lo tanto hay que refrigerarlos bien. | Que hace | Cuando usar --------|----------------------------------------------------------------------------------------------- RAID 0 | Todos los dicos actuan como 1 solo (se lee y escribe en paralelo en todos) | Cuando se busca velocidad RAID 1 | La inforacion se duplica | Cuando se busca fualt tolerance RAID 5 | caca RAID 6 | caca RAID 10 | Cuando se busca fualt tolerance con velocidad RAID 0: lass velocidades de lectura y escritura. Normalmente es la suma de las velocidades de las unidades menos un 10-15%. Maxiama prestaciones (velocidad de escritura y lectura): 1 SSD NVME M2 Varios SSD NVME M2 en RAID 0 Maxima seguridad a posibles fallos (fault tolerance) RAID 1 or RAID 5 (LVM) Logical Volume Management RAM ECC RAM: Good for servers","title":"Hardware"},{"location":"hardware/#hardware","text":"Mother board 1*1030\u20ac = 1030\u20ac https://www.pccomponentes.com/asus-pro-ws-wrx80e-sage-se-wifi CPU 32 cores 1*3500\u20ac = 3500\u20ac 6 x GPU 3090 6*2200\u20ac = 13000\u20ac 256GB RAM (8 x 32GB) 8*225\u20ac = 1800\u20ac 16TB NVMe (8 x 2TB) 8*320\u20ac = 2650\u20ac 128TB HHD (8 x 8TB) 8*320\u20ac = 2650\u20ac ======================================= 25000\u20ac Componente Precio Inic. Mej 1 Mej 2 Mej 3 Mej 4 Mej 5 Mej 6 Mother board (ASUS PRO WS WRX80E) 1030\u20ac x1 CPU (AMD thradripper 5975WX) 3500\u20ac x1 GPU (Nvidia RTX 3090) 2200\u20ac x1 x1 x1 x1 x1 x1 x1 256GB RAM (8 x 32GB) 1800\u20ac Almacenamineto SSD M2 Almacenamineto SSD SATA Almacenamineto HDD Fuente Total 8530\u20ac","title":"Hardware"},{"location":"hardware/#motherboard","text":"128 PCIe 4.0 lines Opcion 1 7 GPUS 4 nvmes M.2 (con capacidad raid 0) Opcion 8 6 GPUS 8 nvmes M.2 (con capacidad raid 0) 8 ranuras de ram (con ECC) CPU: Threadripper Pro (gama 3000 o 5000) 8 sata ports https://www.youtube.com/watch?v=m5xd2ZizMOA MSI WS WRX80","title":"Motherboard"},{"location":"hardware/#cpu-amd","text":"| | | | PISTAS | | | | CORES | RAM MEMORY | PCIe4.0 | PRICE | SOCKET |-------------------------|-------|---------------------|---------|-------|------- | Ryzen 9 5900X | 12 | 128GB (2ch) | 20 | 500\u20ac | | Ryzen 9 5950X | 16 | 128GB (2ch) | 20 | 670\u20ac | | | | | | | | Threadripper 3960X | 24 | 512GB (4ch) 95 GB/s | 64 | 1700\u20ac | sTRX4 | Threadripper 3970X | 32 | 512GB (4ch) 95 GB/s | 64 | | sTRX4 | Threadripper 3990X | 64 | 512GB (4ch) 95 GB/s | 64 | | sTRX4 | | | | | | | Marzo 2021 | | | | | | Threadripper Pro 3945WX | 12 | 2TB (8ch) 205 GB/s | 128 | | WRX80 | Threadripper Pro 3955WX | 16 | 2TB (8ch) 205 GB/s | 128 | | | Threadripper Pro 3965WX | 24 | 2TB (8ch) 205 GB/s | 128 | | | Threadripper Pro 3975WX | 32 | 2TB (8ch) 205 GB/s | 128 | 3500\u20ac | ESTE ES EL DE ANDRES | Threadripper Pro 3995WX | 64 | 2TB (8ch) 205 GB/s | 128 | 6000..8000\u20ac | | | | | | | | Marzo 2022 | | | | | | Threadripper Pro 5945WX | 12 | 8 sWRX8 | Threadripper Pro 5955WX | 16 | 8 | Threadripper Pro 5965WX | 24 | 8 | Threadripper Pro 5975WX | 32 | 8 | Threadripper Pro 5995WX | 64 | 8 | | | Gama de servidores | | | EPYC 7001 | EPYC 7002 | EPYC 7003 https://gadgetversus.com/processor/amd-ryzen-threadripper-pro-3955wx-specs/ MAL: pero no lo recomineda pq tine contencion de memoria pq tiene 4 canales Andres recomienda la gama Threadripper antes que la Epyc pq caundo usas porcesoso de 1 solo hilo con 1 solo nueclo va mas r\u00e1pido. la serie pro de los thradriper (acaba en 5) tiene soporte para 8 canales en memoria","title":"CPU AMD"},{"location":"hardware/#pcie","text":"PCIe Bits x1 x4 (Nvme) x8 x16 (GPU) 1.0 8b/10b 250 MB/s 1 GB/s 2 GB/s 4 GB/s 2.0 8b/10b 500 MB/s 2 GB/s 4 GB/s 8 GB/s 3.0 128b/130b 984.6 MB/s 3.938 GB/s 7.877 GB/s 15.754 GB/s 4.0 128b/130b 1.969 GB/s 7.877 GB/s 15.754 GB/s 31.508 GB/s","title":"PCIe"},{"location":"hardware/#gpu","text":"CUDA Tensor FP64","title":"GPU"},{"location":"hardware/#gpu-realese-cores-cores-memory-watts-price-tfplos","text":"A2 Nov 2021 1280 24GB GDDR6 50 A10 Apr 2021 9216 24GB GDDR6 150 3090 (24GB) A6000 A16 Apr 2021 10240 4x16GB GDDR6 250 A30 Apr 2021 3584 24GB HBM2 165 5.000\u20ac (5,2) 10,3 A40 Oct 2020 10752 336 48GB GDDR6 300 5.000\u20ac A100 May 2020 6912 40GB HBM2 250 10.000\u20ac A100 May 2020 6912 40GB HBM2BULK250 10.000\u20ac A100 May 2020 6912 80GB HBM2 250 20.000\u20ac","title":"GPU   Realese   cores   cores   Memory       Watts  Price  tFPLOS"},{"location":"hardware/#discos-duros","text":"lectura seq escritura seq HDD 80..150 MB/s 80..150 MB/s SSD SATA 500..550 MB/s 450..500 MB/s SSD M.2 NVMe PCIe 3.0 3000.3500 MB/s 3000.3500 MB/s SSD M.2 NVMe PCIe 4.0 5000.7000 MB/s 5000.7000 MB/s ojo! no todos los SSD M.2 del mercado son NVMe, tambi\u00e9n hay unidades M.2 SATA . Loss M.2 NVMe PCIe tienen un problema denominado Thermal Throttling: el rendimiento cae dr\u00e1sticamente cuando se da una temperatura muy elevada. Por lo tanto hay que refrigerarlos bien. | Que hace | Cuando usar --------|----------------------------------------------------------------------------------------------- RAID 0 | Todos los dicos actuan como 1 solo (se lee y escribe en paralelo en todos) | Cuando se busca velocidad RAID 1 | La inforacion se duplica | Cuando se busca fualt tolerance RAID 5 | caca RAID 6 | caca RAID 10 | Cuando se busca fualt tolerance con velocidad RAID 0: lass velocidades de lectura y escritura. Normalmente es la suma de las velocidades de las unidades menos un 10-15%. Maxiama prestaciones (velocidad de escritura y lectura): 1 SSD NVME M2 Varios SSD NVME M2 en RAID 0 Maxima seguridad a posibles fallos (fault tolerance) RAID 1 or RAID 5 (LVM) Logical Volume Management","title":"Discos duros"},{"location":"hardware/#ram","text":"ECC RAM: Good for servers","title":"RAM"},{"location":"server/","text":"Visible IP on the internet Problem 1: Static IP THere are not enough IPv4 adresses for everyone in the world so your ISP (Internet Service Provider) probably has given you a dynamic IP adress instead of an static IP adress . Solution: OPTION 1) You can ask for you ISP to give a static IP adress . OPTION 2) You can use noip which track your current ip Wen you sign up, you pick a free domain name and automaticlly detect your external IP In order to detect changes of your IOP, you need to install the noip software on the server. Problem 2: you router need to allow oustside traffic to get in to your network. Open up port 80 on the router (this is port forawrding) https://www.youtube.com/watch?v=ZlYyiuBc8Mc Ojo que el ISP tiene un servidor ACS que controla todos sus routers Wake on lan Server ip link to find informatio about available network cards find the name og the ethernet enterface (eg. enp0s31f6 ) find the mac address (eg. e0:............) sudo ethtool enp0s31f6 | grep Wake-on Check that is on Client wakeonlan mac address","title":"Server"},{"location":"server/#visible-ip-on-the-internet","text":"","title":"Visible IP on the internet"},{"location":"server/#problem-1-static-ip","text":"THere are not enough IPv4 adresses for everyone in the world so your ISP (Internet Service Provider) probably has given you a dynamic IP adress instead of an static IP adress . Solution: OPTION 1) You can ask for you ISP to give a static IP adress . OPTION 2) You can use noip which track your current ip Wen you sign up, you pick a free domain name and automaticlly detect your external IP In order to detect changes of your IOP, you need to install the noip software on the server.","title":"Problem 1: Static IP"},{"location":"server/#problem-2-you-router-need-to-allow-oustside-traffic-to-get-in-to-your-network","text":"Open up port 80 on the router (this is port forawrding) https://www.youtube.com/watch?v=ZlYyiuBc8Mc Ojo que el ISP tiene un servidor ACS que controla todos sus routers","title":"Problem 2: you router need to allow oustside traffic to get in to your network."},{"location":"server/#wake-on-lan","text":"","title":"Wake on lan"},{"location":"server/#server","text":"ip link to find informatio about available network cards find the name og the ethernet enterface (eg. enp0s31f6 ) find the mac address (eg. e0:............) sudo ethtool enp0s31f6 | grep Wake-on Check that is on","title":"Server"},{"location":"server/#client","text":"wakeonlan mac address","title":"Client"},{"location":"web_scraping/","text":"Web Scraping Get data from internet cURL Selenium Google Chrome cli google-chrome-stable --headless --disable-gpu --dump-dom 'URL' > ~/file.html lynx lynx -dump -listonly http://aligajani.com Reference https://www.queryhome.com/tech/54364/overview-about-wget-command https://www.linuxtechi.com/wget-command-practical-examples/ https://www.youtube.com/watch?v=GJum2O2JM6M https://www.youtube.com/watch?v=-GCDJ26B4Ho Parse data 3 ways There are 3 ways of we scrapping: FIRST OPTION: Static webpages + pup SECOND OPTION: API reverse engineering + jq LAST OPTION: Use Selenium or Headless browser 1. Static webpages Get a simple static page (server side rendered) with curl or wget and parse them Example: page_html=$(curl -s $URL) title=$(echo $page_html | pup 'title' text{}) echo $title col_A=$(echo $page_html | pup 'a.bb1c_ attr{href}') col_B=$(echo $page_html | pup 'span.price-sale text{}') table=$(paste col_A col_B) https://www.youtube.com/watch?v=GJum2O2JM6M 2. API reverse engineering Useful for dynamic websites. Find the hidden api that makes XHR requests to fullfill the webpage. XMLHttpRequest is used heavily in AJAX programming. Step 1: See the requests that the web is doing: Chrome or Firefox dev tools > Network > XHR requests Step 2: Copy the target request as cURL (right click) Step 3: Paste the target request in Postman or Insomnia Step 4: Elaborate your own script using curl + jq 3. Headless browser and Selenium Use Selenium or Headless browser for automate the interaction with the web.","title":"Web Scraping"},{"location":"web_scraping/#web-scraping","text":"","title":"Web Scraping"},{"location":"web_scraping/#get-data-from-internet","text":"cURL Selenium Google Chrome cli google-chrome-stable --headless --disable-gpu --dump-dom 'URL' > ~/file.html lynx lynx -dump -listonly http://aligajani.com","title":"Get data from internet"},{"location":"web_scraping/#reference","text":"https://www.queryhome.com/tech/54364/overview-about-wget-command https://www.linuxtechi.com/wget-command-practical-examples/ https://www.youtube.com/watch?v=GJum2O2JM6M https://www.youtube.com/watch?v=-GCDJ26B4Ho","title":"Reference"},{"location":"web_scraping/#parse-data","text":"","title":"Parse data"},{"location":"web_scraping/#3-ways","text":"There are 3 ways of we scrapping: FIRST OPTION: Static webpages + pup SECOND OPTION: API reverse engineering + jq LAST OPTION: Use Selenium or Headless browser","title":"3 ways"},{"location":"web_scraping/#1-static-webpages","text":"Get a simple static page (server side rendered) with curl or wget and parse them Example: page_html=$(curl -s $URL) title=$(echo $page_html | pup 'title' text{}) echo $title col_A=$(echo $page_html | pup 'a.bb1c_ attr{href}') col_B=$(echo $page_html | pup 'span.price-sale text{}') table=$(paste col_A col_B) https://www.youtube.com/watch?v=GJum2O2JM6M","title":"1. Static webpages"},{"location":"web_scraping/#2-api-reverse-engineering","text":"Useful for dynamic websites. Find the hidden api that makes XHR requests to fullfill the webpage. XMLHttpRequest is used heavily in AJAX programming. Step 1: See the requests that the web is doing: Chrome or Firefox dev tools > Network > XHR requests Step 2: Copy the target request as cURL (right click) Step 3: Paste the target request in Postman or Insomnia Step 4: Elaborate your own script using curl + jq","title":"2. API reverse engineering"},{"location":"web_scraping/#3-headless-browser-and-selenium","text":"Use Selenium or Headless browser for automate the interaction with the web.","title":"3. Headless browser and Selenium"},{"location":"wget/","text":"Wget wget URL : Download and store in the current directory. wget -O CUSTOM_FILENAME URL : Download and store in the current directory with a different file name. wget -O - URL : Download and redirects to stdout wget --limit-rate=200k URL : Specify download speed. Here speed is limited to 200k. wget -c URL : Continue the Incomplete Download wget -b URL : Download in the Background wget --spider URL : Not download the webpage, just check that it is there. wget --tries=75 URL : Increase Total Number of Retry Attempts wget -i FILE_WITH_URLS.txt Download multiple URLs. Each line in the txt document is a URL. -m --mirror : Turns on infinite recursion and time-stamping, and keeps FTP directory listings. -r --recursive Turn on recursive retrieving. The default maximum depth is 5. -l depth --level=depth Set the maximum number of subdirectories that Wget will recurse into to depth. inf means infinite -N --timestamping Turn on time-stamping. --no-remove-listing Don't remove the .listing files generated by FTP retrievals. -p --page-requisites Downloads all files that are necessary to properly display a given HTML page. -k --convert-links After the download, convert the external links to make the work. -P ./LOCAL-DIR saves all the files and directories to the specified directory. - wget --mirror --page-requisites --convert-links -P ./LOCAL_DIR URL : Download a Full Website - wget -Q5m -i FILE_WITH_URLS.txt : Quit Downloading When it Exceeds Certain Size - wget --ftp-user=USERNAME --ftp-password=PASSWORD URL : FTP Download With wget - wget --reject=gif URL : Reject Certain File Types while Downloading - wget -o download.log URL : Log messages to a log file instead of stderr Using wget -o","title":"Wget"},{"location":"wget/#wget","text":"wget URL : Download and store in the current directory. wget -O CUSTOM_FILENAME URL : Download and store in the current directory with a different file name. wget -O - URL : Download and redirects to stdout wget --limit-rate=200k URL : Specify download speed. Here speed is limited to 200k. wget -c URL : Continue the Incomplete Download wget -b URL : Download in the Background wget --spider URL : Not download the webpage, just check that it is there. wget --tries=75 URL : Increase Total Number of Retry Attempts wget -i FILE_WITH_URLS.txt Download multiple URLs. Each line in the txt document is a URL. -m --mirror : Turns on infinite recursion and time-stamping, and keeps FTP directory listings. -r --recursive Turn on recursive retrieving. The default maximum depth is 5. -l depth --level=depth Set the maximum number of subdirectories that Wget will recurse into to depth. inf means infinite -N --timestamping Turn on time-stamping. --no-remove-listing Don't remove the .listing files generated by FTP retrievals. -p --page-requisites Downloads all files that are necessary to properly display a given HTML page. -k --convert-links After the download, convert the external links to make the work. -P ./LOCAL-DIR saves all the files and directories to the specified directory. - wget --mirror --page-requisites --convert-links -P ./LOCAL_DIR URL : Download a Full Website - wget -Q5m -i FILE_WITH_URLS.txt : Quit Downloading When it Exceeds Certain Size - wget --ftp-user=USERNAME --ftp-password=PASSWORD URL : FTP Download With wget - wget --reject=gif URL : Reject Certain File Types while Downloading - wget -o download.log URL : Log messages to a log file instead of stderr Using wget -o","title":"Wget"}]}